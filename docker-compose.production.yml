version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: ppyc_production
      POSTGRES_USER: ${DB_USER:-ppyc}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-secure_password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backups:/backups
    ports:
      - "5432:5432"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-ppyc}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache & Session Store
  redis:
    image: redis:7-alpine
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Rails API Backend
  api:
    build:
      context: ./ppyc_backend
      dockerfile: Dockerfile.production
    environment:
      RAILS_ENV: production
      DATABASE_URL: postgresql://${DB_USER:-ppyc}:${DB_PASSWORD:-secure_password}@postgres:5432/ppyc_production
      REDIS_URL: redis://redis:6379/1
      SECRET_KEY_BASE: ${SECRET_KEY_BASE}
      CLOUDINARY_CLOUD_NAME: ${CLOUDINARY_CLOUD_NAME}
      CLOUDINARY_API_KEY: ${CLOUDINARY_API_KEY}
      CLOUDINARY_API_SECRET: ${CLOUDINARY_API_SECRET}
      CORS_ORIGINS: ${CORS_ORIGINS:-https://ppyc.com,https://www.ppyc.com}
      DOMAIN: ${DOMAIN:-ppyc.com}
    ports:
      - "3000:3000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    volumes:
      - ./logs:/app/log
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/up"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # Frontend (React/Vite)
  frontend:
    build:
      context: ./ppyc_frontend
      dockerfile: Dockerfile.production
      args:
        VITE_API_BASE_URL: ${VITE_API_BASE_URL:-https://api.ppyc.com/api/v1}
        VITE_CLOUDINARY_CLOUD_NAME: ${CLOUDINARY_CLOUD_NAME}
        VITE_CLOUDINARY_API_KEY: ${CLOUDINARY_API_KEY}
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/sites-available:/etc/nginx/conf.d:ro
      - ./ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
      - frontend_dist:/var/www/ppyc:ro
    depends_on:
      - api
      - frontend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Background Job Processor (Sidekiq)
  sidekiq:
    build:
      context: ./ppyc_backend
      dockerfile: Dockerfile.production
    environment:
      RAILS_ENV: production
      DATABASE_URL: postgresql://${DB_USER:-ppyc}:${DB_PASSWORD:-secure_password}@postgres:5432/ppyc_production
      REDIS_URL: redis://redis:6379/1
      SECRET_KEY_BASE: ${SECRET_KEY_BASE}
      CLOUDINARY_CLOUD_NAME: ${CLOUDINARY_CLOUD_NAME}
      CLOUDINARY_API_KEY: ${CLOUDINARY_API_KEY}
      CLOUDINARY_API_SECRET: ${CLOUDINARY_API_SECRET}
    command: bundle exec sidekiq
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    volumes:
      - ./logs:/app/log
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Database Backup Service
  backup:
    image: postgres:15-alpine
    environment:
      PGPASSWORD: ${DB_PASSWORD:-secure_password}
    volumes:
      - ./backups:/backups
      - ./scripts:/scripts:ro
    depends_on:
      - postgres
    restart: "no"
    profiles:
      - backup
    command: /scripts/backup.sh

  # Monitoring (Optional)
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    restart: unless-stopped
    profiles:
      - monitoring

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3001:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana:/etc/grafana/provisioning:ro
    depends_on:
      - prometheus
    restart: unless-stopped
    profiles:
      - monitoring

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  frontend_dist:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  default:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16 