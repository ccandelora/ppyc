#!/usr/bin/env bash

# Database Setup Script for PPYC Backend
# This script sets up the PostgreSQL database for production deployment

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration
DB_NAME="ppyc_production"
DB_USER="ppyc_user"
DB_PASSWORD="${PPYC_BACKEND_DATABASE_PASSWORD:-}"
POSTGRES_USER="postgres"

# Functions
log() {
    echo -e "${BLUE}[$(date +'%Y-%m-%d %H:%M:%S')] $1${NC}"
}

success() {
    echo -e "${GREEN}✅ $1${NC}"
}

warning() {
    echo -e "${YELLOW}⚠️  $1${NC}"
}

error() {
    echo -e "${RED}❌ $1${NC}"
    exit 1
}

check_prerequisites() {
    log "Checking prerequisites..."
    
    # Check if PostgreSQL is installed and running
    if ! command -v psql &> /dev/null; then
        error "PostgreSQL is not installed or not in PATH"
    fi
    
    if ! systemctl is-active --quiet postgresql; then
        error "PostgreSQL service is not running. Start it with: sudo systemctl start postgresql"
    fi
    
    # Check if password is provided
    if [[ -z "$DB_PASSWORD" ]]; then
        error "Database password not provided. Set PPYC_BACKEND_DATABASE_PASSWORD environment variable"
    fi
    
    # Check if we can connect as postgres user
    if ! sudo -u postgres psql -c '\q' 2>/dev/null; then
        error "Cannot connect to PostgreSQL as postgres user"
    fi
    
    success "Prerequisites check passed"
}

create_database_user() {
    log "Creating database user '$DB_USER'..."
    
    # Check if user already exists
    if sudo -u postgres psql -tAc "SELECT 1 FROM pg_roles WHERE rolname='$DB_USER'" | grep -q 1; then
        warning "User '$DB_USER' already exists"
        log "Updating password for existing user..."
        sudo -u postgres psql -c "ALTER USER $DB_USER WITH PASSWORD '$DB_PASSWORD';"
    else
        log "Creating new user '$DB_USER'..."
        sudo -u postgres psql -c "CREATE USER $DB_USER WITH PASSWORD '$DB_PASSWORD';"
        sudo -u postgres psql -c "ALTER USER $DB_USER CREATEDB;"
    fi
    
    success "Database user configured"
}

create_database() {
    log "Creating database '$DB_NAME'..."
    
    # Check if database already exists
    if sudo -u postgres psql -lqt | cut -d \| -f 1 | grep -qw "$DB_NAME"; then
        warning "Database '$DB_NAME' already exists"
        log "Updating database owner..."
        sudo -u postgres psql -c "ALTER DATABASE $DB_NAME OWNER TO $DB_USER;"
    else
        log "Creating new database '$DB_NAME'..."
        sudo -u postgres psql -c "CREATE DATABASE $DB_NAME OWNER $DB_USER;"
    fi
    
    success "Database configured"
}

set_permissions() {
    log "Setting up database permissions..."
    
    # Connect to the database and set permissions
    sudo -u postgres psql -d "$DB_NAME" << EOF
-- Grant all privileges on database
GRANT ALL PRIVILEGES ON DATABASE $DB_NAME TO $DB_USER;

-- Grant all privileges on schema
GRANT ALL PRIVILEGES ON SCHEMA public TO $DB_USER;

-- Grant all privileges on existing tables
GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA public TO $DB_USER;

-- Grant all privileges on existing sequences
GRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA public TO $DB_USER;

-- Set default privileges for future tables
ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT ALL ON TABLES TO $DB_USER;
ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT ALL ON SEQUENCES TO $DB_USER;

-- Ensure user can create tables
ALTER USER $DB_USER CREATEDB;
EOF
    
    success "Permissions configured"
}

test_connection() {
    log "Testing database connection..."
    
    # Test connection with the application user
    if PGPASSWORD="$DB_PASSWORD" psql -h localhost -U "$DB_USER" -d "$DB_NAME" -c "SELECT current_user, current_database();" > /dev/null 2>&1; then
        success "Database connection test passed"
        
        # Show connection details
        log "Connection details:"
        PGPASSWORD="$DB_PASSWORD" psql -h localhost -U "$DB_USER" -d "$DB_NAME" -c "SELECT current_user as user, current_database() as database, version();"
    else
        error "Database connection test failed"
    fi
}

run_migrations() {
    log "Running database migrations..."
    
    # Check if Rails environment is set
    if [[ -z "$RAILS_ENV" ]]; then
        export RAILS_ENV=production
        log "Set RAILS_ENV to production"
    fi
    
    # Run migrations
    if bundle exec rails db:migrate; then
        success "Database migrations completed"
    else
        error "Database migrations failed"
    fi
}

setup_database() {
    log "Starting database setup for PPYC Backend..."
    echo "=================================="
    
    check_prerequisites
    create_database_user
    create_database
    set_permissions
    test_connection
    
    echo "=================================="
    success "Database setup completed successfully!"
    
    log "Next steps:"
    echo "1. Set environment variables:"
    echo "   export PPYC_BACKEND_DATABASE_PASSWORD='$DB_PASSWORD'"
    echo "   export SECRET_KEY_BASE='$(openssl rand -hex 64)'"
    echo "   export RAILS_ENV=production"
    echo ""
    echo "2. Run migrations:"
    echo "   bundle exec rails db:migrate"
    echo ""
    echo "3. (Optional) Seed the database:"
    echo "   bundle exec rails db:seed"
    echo ""
    echo "4. Test the setup:"
    echo "   bundle exec rails db:health_check"
}

# Main execution
case "${1:-setup}" in
    setup)
        setup_database
        ;;
    migrate)
        run_migrations
        ;;
    test)
        test_connection
        ;;
    permissions)
        set_permissions
        ;;
    *)
        echo "Usage: $0 [setup|migrate|test|permissions]"
        echo ""
        echo "Commands:"
        echo "  setup       - Complete database setup (default)"
        echo "  migrate     - Run database migrations only"
        echo "  test        - Test database connection"
        echo "  permissions - Reset database permissions"
        exit 1
        ;;
esac 